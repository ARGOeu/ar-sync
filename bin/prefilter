#!/usr/bin/python

import sys
import os
import time
import datetime

defaultConfig = '/etc/ar-sync/prefilter.conf'

#consumer
consumerFileDirectory = '/var/lib/ar-consumer'
consumerFilename = 'ar-consumer_log_%s-%s-%s.txt'
consumerFileFields = 'timestamp;ROC;nagios_host;metricName;serviceType;hostName;metricStatus;voName;voFqan'
consumerFileFieldDelimiter = '\001'

#poem
poemFileDirectory = '/var/lib/ar-sync'
poemFilename = 'poem_sync_%s_%s_%s.out'
poemFileFields = 'server;ngi;profile;service_flavour;metric;vo;fqan'
poemFileFieldDelimiter = '\001'

#output
outputFileDirectory = '/var/lib/ar-sync'
outputFilename = 'prefilter_%s_%s_%s.out'
outputFileFields = 'timestamp;metricName;serviceType;hostName;metricStatus;voName;voFqan;profile'
outputFileFormat = '%s\001%s\001%s\001%s\001%s\001%s\001%s\001%s\r\n'

# indexes
consumerFileFields = consumerFileFields.split(';')

timestampIdx = consumerFileFields.index('timestamp')
ngiIdx = consumerFileFields.index('ROC')
serverIdx = consumerFileFields.index('nagios_host')
typeIdx = consumerFileFields.index('serviceType')
metricIdx = consumerFileFields.index('metricName')
hostIdx = consumerFileFields.index('hostName')
statusIdx = consumerFileFields.index('metricStatus')
voIdx = consumerFileFields.index('voName')
vofqanIdx = consumerFileFields.index('voFqan')

##############################
# load config
##############################
def loadConfiguration():
    #load config
    configFile = None
    configFields = dict()
    if os.path.isfile(defaultConfig):
        configFile = open(defaultConfig, 'r')
        lines = configFile.readlines()

        for line in lines:
            if line[0] == '#':
                continue
            splitLine = line.split('=')
            if len(splitLine) > 1:
                key = splitLine[0].strip()
                value = splitLine[1].strip()
                value = value.decode('string_escape')
                if value[0] == "'":
                    if value [-1] == "'":
                        value = value[1:-1]
                    else:
                        continue
                elif value[0] == '"':
                    if value [-1] == '"':
                        value = value[1:-1]
                    else:
                        continue
                else:
                    value = int(value)
                configFields[key] = value

        configFile.close()

        if 'consumerFileDirectory' in configFields:
            consumerFileDirectory = configFields['consumerFileDirectory']

        if 'consumerFilename' in configFields:
            consumerFilename = configFields['consumerFilename']

        if 'consumerFileFields' in configFields:
            consumerFileFields = configFields['consumerFileFields']

        if 'consumerFileFieldDelimiter' in configFields:
            consumerFileFieldDelimiter = configFields['consumerFileFieldDelimiter']
	
	if 'poemFileDirectory' in configFields:
            poemFileDirectory = configFields['poemFileDirectory']

        if 'poemFilename' in configFields:
            poemFilename = configFields['poemFilename']

        if 'poemFileFields' in configFields:
            poemFileFields = configFields['poemFileFields']

        if 'poemFileFieldDelimiter' in configFields:
            poemFileFieldDelimiter = configFields['poemFileFieldDelimiter']

	if 'outputFileDirectory' in configFields:
            outputFileDirectory = configFields['outputFileDirectory']

        if 'outputFilename' in configFields:
            outputFilename = configFields['outputFilename']

        if 'outputFileFields' in configFields:
            outputFileFields = configFields['outputFileFields']

        if 'outputFileFormat' in configFields:
            outputFileFormat = configFields['outputFileFormat']

        consumerFileFields = consumerFileFields.split(';')

        timestampIdx = consumerFileFields.index('timestamp')
        ngiIdx = consumerFileFields.index('ROC')
        serverIdx = consumerFileFields.index('nagios_host')
        typeIdx = consumerFileFields.index('serviceType')
        metricIdx = consumerFileFields.index('metricName')
        hostIdx = consumerFileFields.index('hostName')
        statusIdx = consumerFileFields.index('metricStatus')
        voIdx = consumerFileFields.index('voName')
        vofqanIdx = consumerFileFields.index('voFqan')



##############################
# load ngis
##############################
def loadNGIs(year, month, day):

        ngiTree = dict()

        profileFieldNames = poemFileFields.split(';')

        poemProfileFile = open(poemFileDirectory + '/' + poemFilename % (year, month, day), 'r')
        poemProfiles = poemProfileFile.read().splitlines()
        poemProfileFile.close();

        for line in poemProfiles:
                if len(line) == 0 or line[0] == '#':
                        continue

                profileFields = line.split(poemFileFieldDelimiter)
		profile = dict()
                for i in range(0,len(profileFieldNames)):
                	profile[profileFieldNames[i]] = profileFields[i]

		ngiTree[profile['server']] = profile['ngi']

	return ngiTree

##############################
# load profiles
##############################
def loadFilteredProfiles(year, month, day):

	profileTree = dict()

	profileFieldNames = poemFileFields.split(';')

        poemProfileFile = open(poemFileDirectory + '/' + poemFilename % (year, month, day), 'r')
        poemProfiles = poemProfileFile.read().splitlines()
        poemProfileFile.close();

        for line in poemProfiles:
                if len(line) == 0 or line[0] == '#':
                        continue

		profileFields = line.split(poemFileFieldDelimiter)
		
		profile = dict()
		for i in range(0,len(profileFieldNames)):
			profile[profileFieldNames[i]] = profileFields[i]

		#find server tree
                serverTree = dict()
                if profile['server'] in profileTree.keys():
                        serverTree = profileTree[profile['server']]
                else:
                        profileTree[profile['server']] = serverTree
		
		#find type tree
		typeTree = dict()
                if profile['service_flavour'] in serverTree.keys():
                        typeTree = serverTree[profile['service_flavour']]
                else:
                        serverTree[profile['service_flavour']] = typeTree

		#find type metric
                metricTree = dict()
                if profile['metric'] in typeTree.keys():
                        metricTree = typeTree[profile['metric']]
                else:
                        typeTree[profile['metric']] = metricTree

		#find vo tree
		vo = '-'
                if len(profile['vo']) > 0:
                        vo = profile['vo']
		voTree = dict()
                if vo in metricTree.keys():
                        voTree = metricTree[vo]
		else:
			metricTree[vo] = voTree

                #find fqan tree
		fqan = '-'
                if len(profile['fqan']) > 0:
                        vfqan = profile['fqan']
		fqanTree = dict()
		if fqan in voTree.keys():
                        fqanTree = voTree[fqan]
                else:
                        voTree[fqan] = fqanTree           	

                voTree[fqan][profile['profile']] = profile

        return profileTree

##############################
# get message profiles
##############################
def getProfilesForConsumerMessage(profileTree, fields):
	
	removeFqan = False
	
	#find server tree
        if fields[serverIdx] in profileTree.keys():
		serverTree = profileTree[fields[serverIdx]]
        else:
		return -1
	
	#find type tree
        if fields[typeIdx] in serverTree.keys():
		typeTree = serverTree[fields[typeIdx]]
	else:
		return -1

        #find type metric
	if fields[metricIdx] in typeTree.keys():
		metricTree = typeTree[fields[metricIdx]]
	else:
		return -1

        #find vo tree
	if len(fields[voIdx]) > 0:
		if fields[voIdx] in metricTree.keys():
			voTree =  metricTree[fields[voIdx]]
		else:
			return -1
	else:
		fqanList = list()
		for vo in metricTree.values():
			if '-' in vo.keys():
				fqan = vo['-']
				fqanList.extend(fqan.values())

		return fqanList	

	if len(fields[vofqanIdx]) > 0:
		if fields[vofqanIdx] in voTree.keys():
                        return voTree[fields[vofqanIdx]].values()
                else:
			if '-' in voTree.keys():
                        	return voTree['-'].values()
			else:
				return -1
	else:
		fqanList = list()
                for fqan in voTree.values():
                        fqanList.extend(fqan.values())

                return fqanList

##############################
# main
##############################

#load config

loadConfiguration()

argsOk = False
for i in range(0,len(sys.argv)-1):
	if sys.argv[i] == '-d':
		if len(sys.argv[i+1].split('-')) == 3:
			year = sys.argv[i+1].split('-')[0];
                        month = sys.argv[i+1].split('-')[1];
                        day = sys.argv[i+1].split('-')[2];

			argsOk = True
		
if not argsOk:
	print "\n\nUsage:\n\tpython prefilter.py -d <date>"
	sys.exit()

ngis = loadNGIs(year, month, day)
profiles = loadFilteredProfiles(year, month, day)

filename = outputFilename % (year, month, day)
outputFile = open(filename, 'w')

rejected = 0
with open(consumerFileDirectory  + '/' + consumerFilename % (year, month, day), 'r') as consumerFile:
	for line in consumerFile:
		if len(line) == 0 or line[0] == '#':
                        continue

		consumerFields = line.split(consumerFileFieldDelimiter)	

		#ngi check
		if consumerFields[serverIdx] in ngis.keys() and (ngis[consumerFields[serverIdx]] == 'ALL' or consumerFields[ngiIdx] == ngis[consumerFields[serverIdx]]):
			
			#profile check
			msgprofiles = getProfilesForConsumerMessage(profiles, consumerFields)
			if type(msgprofiles) is int:
				print line.replace(consumerFileFieldDelimiter, '\t')
				rejected += 1
				continue
			
			if len(msgprofiles) > 0:
				for profile in msgprofiles:
					outputFile.write(outputFileFormat % (consumerFields[timestampIdx], \
										consumerFields[metricIdx], \
										consumerFields[typeIdx], \
                                                                                consumerFields[hostIdx], \
                                                                                consumerFields[statusIdx], \
                                                                                profile['vo'], \
                                                                                profile['fqan'], \
                                                                                profile['profile'] ))
			else:
				rejected += 1
				print line.replace(consumerFileFieldDelimiter, '\t')
	

consumerFile.close()
outputFile.close()

print 'Rejected: ' + str(rejected)

