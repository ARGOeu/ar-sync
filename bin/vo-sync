#!/usr/bin/python

import urllib
import os
import datetime
import xml.dom.minidom
import httplib
from operator import itemgetter

defaultConfig = '/etc/ar-sync/vo-sync.conf'

urls = 'https://sam-ngi.grid.sara.nl/VOfeeds/lsgrid.xml'
hostKey = '/etc/grid-security/hostkey.pem'
hostCert = '/etc/grid-security/hostcert.pem'
outputDir = '/var/lib/ar-sync'

outputFileSites = outputDir + '/vo_sites_%s.out'
outputFileGroups = outputDir + '/vo_groups_%s.out'

# Hostname, Service Type, Site
defaultOutputFileSitesFieldFormat = '%s\001%s\001%s\r\n'
# Hostname, Service Type, Service group
defaultOutputFileGroupsFieldFormat = '%s\001%s\001%s\r\n'

def loadConfiguration():
    #load config
    configFile = None
    configFields = dict()
    if os.path.isfile(defaultConfig):
        configFile = open(defaultConfig, 'r')
        lines = configFile.readlines()

        for line in lines:
            if line[0] == '#':
                continue
            splitLine = line.split('=')
            if len(splitLine) > 1:
                key = splitLine[0].strip()
                value = splitLine[1].strip()
                value = value.decode('string_escape')
                if value[0] == "'":
                    if value [-1] == "'":
                        value = value[1:-1]
                    else:
                        continue
                elif value[0] == '"':
                    if value [-1] == '"':
                        value = value[1:-1]
                    else:
                        continue
                else:
                    value = int(value)
                configFields[key] = value

        configFile.close()

        if 'urls' in configFields:
            urls = configFields['urls']

        if 'hostKey' in configFields:
            hostKey = configFields['hostKey']

        if 'hostCert' in configFields:
            hostCert = configFields['hostCert']

        if 'outputDir' in configFields:
            outputDir = configFields['outputDir']

	outputFileSites = outputDir + '/vo_sites_%s.out'
        outputFileGroups = outputDir + '/vo_groups_%s.out'

def createOutputFilename(filename, timestamp):
    return filename % timestamp

def getVOInfo(host, path, serviceList, siteList, groupList):
    conn = httplib.HTTPSConnection(host, 443, hostKey, hostCert)
    conn.request('GET', path)
    res = conn.getresponse()
    if res.status == 200:
        dom = xml.dom.minidom.parseString(res.read())
        sites = dom.getElementsByTagName('atp_site')
        for site in sites:
            #site
            siteName = site.getAttribute('name')
            if siteName not in siteList:
                siteList[siteName] = {'site': siteName}
            siteList[siteName]['infrastructure'] = site.getAttribute('infrast')
            
            #group
            siteGroups = [];
            groups = site.getElementsByTagName('group')
            for group in groups:
                groupName = group.getAttribute('name')
                if groupName not in groupList:
                    groupList[groupName] = {'group': groupName}
                groupList[groupName]['type'] = group.getAttribute('type')
                siteGroups.append(groupName);

            #service endpoints
            services = site.getElementsByTagName('service')
            for service in services:
                serviceName = service.getAttribute('endpoint')
                if serviceName not in serviceList:
                    serviceList[serviceName] = {'service': serviceName}
                serviceList[serviceName]['endpoint'] = service.getAttribute('endpoint')
                serviceList[serviceName]['type'] = service.getAttribute('flavour')
                serviceList[serviceName]['hostname'] = service.getAttribute('hostname')
                if 'sites' not in serviceList[serviceName]:
                    serviceList[serviceName]['sites'] = []
                serviceList[serviceName]['sites'].append(siteName)
                if 'groups' not in serviceList[serviceName]:
                    serviceList[serviceName]['groups'] = []
                serviceList[serviceName]['groups'].extend(siteGroups)

    else:
        print('ERROR: Connection to %s failed: %s' % (host,res.reason))


##############################
# main
##############################

loadConfiguration()

siteList = {}
serviceList = {}
groupList = {}

urlList = urls.split(';')

for url in urlList:
    splitter = url.index('/', 9)
    host = url[8:splitter]
    path = url[splitter:] 

    getVOInfo(host, path, serviceList, siteList, groupList)

timestamp = datetime.datetime.utcnow().strftime('%Y_%m_%d')

filename = createOutputFilename(outputFileSites, timestamp)
outFile = open(filename, 'w')
lastId = ''


for key in serviceList:
      
    service = serviceList[key]
 
    for siteName in service['sites']:

        if siteName in siteList:

            site = siteList[siteName]

            outFile.write(defaultOutputFileSitesFieldFormat % ( service['hostname'],
                   service['type'],
                   site['site']))
        else:
            print('ERROR: found service endpoint (%s, %s) associated to non-existing site %s' % (service['hostname'], service['type'], siteName))
outFile.close();

filename = createOutputFilename(outputFileGroups, timestamp)
outFile = open(filename, 'w')
for key in serviceList:

    service = serviceList[key]

    for groupName in service['groups']:

        if groupName in groupList:

            group = groupList[groupName]

            outFile.write(defaultOutputFileGroupsFieldFormat % ( service['hostname'],
                   service['type'],
                   group['group']))
        else:
            print('ERROR: found service endpoint (%s, %s) associated to non-existing group %s' % (service['hostname'], service['type'], groupName))
outFile.close();
