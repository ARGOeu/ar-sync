#!/usr/bin/python

import urllib
import os
import datetime
import xml.dom.minidom
import httplib
import sys

defaultConfig = '/etc/ar-sync/downtime-sync.conf'

gocdbHost = 'goc.egi.eu'
gocdbUrl = 'https://'+gocdbHost+'/gocdbpi/'
hostKey = '/etc/grid-security/hostkey.pem'
hostCert = '/etc/grid-security/hostcert.pem'
outputDir = '/var/lib/ar-sync'

defaultOutputFileDowntimes = outputDir + '/downtimes_%s.out'
# Hostname, Service Type, Start, End
defaultOutputFileDowntimesFieldFormat = '%s\001%s\001%s\001%s\r\n'

def loadConfiguration:
     #load config
     configFile = None
     configFields = dict()
     if os.path.isfile(defaultConfig):
         configFile = open(defaultConfig, 'r')
         lines = configFile.readlines()

         for line in lines:
             if line[0] == '#':
                 continue
             splitLine = line.split('=')
             if len(splitLine) > 1:
                 key = splitLine[0].strip()
                 value = splitLine[1].strip()
                 value = value.decode('string_escape')
                 if value[0] == "'":
                     if value [-1] == "'":
                         value = value[1:-1]
                     else:
                         continue
                 elif value[0] == '"':
                     if value [-1] == '"':
                         value = value[1:-1]
                     else:
                         continue
                 else:
                     value = int(value)
                 configFields[key] = value

        configFile.close()

        if 'gocdbHost' in configFields:
            gocdbHost = configFields['gocdbHost']

        if 'gocdbUrl' in configFields:
            gocdbUrl = configFields['gocdbUrl']

        if 'hostKey' in configFields:
            hostKey = configFields['hostKey']

        if 'hostCert' in configFields:
            hostCert = configFields['hostCert']

        if 'outputDir' in configFields:
            outputDir = configFields['outputDir']

        defaultOutputFileDowntimes = outputDir + '/downtimes_%s.out'

def createOutputFilename(filename, timestamp):
    return filename % timestamp

def getDowntimes(start, end):

    filteredDowntimes = list()

    conn = httplib.HTTPSConnection(gocdbHost, 443, hostKey, hostCert)
    conn.request('GET', '/gocdbpi/private/' + '?method=get_downtime&startdate=%s&enddate=%s' % (start, end))
    res = conn.getresponse()
    if res.status == 200:
        doc = xml.dom.minidom.parseString(res.read())
        downtimes = doc.getElementsByTagName('DOWNTIME')

        for downtime in downtimes:
            classification = downtime.getAttributeNode('CLASSIFICATION').nodeValue
            hostname = downtime.getElementsByTagName('HOSTNAME')[0].childNodes[0].data
            serviceType = downtime.getElementsByTagName('HOSTNAME')[0].childNodes[0].data
            startTime = downtime.getElementsByTagName('FORMATED_START_DATE')[0].childNodes[0].data
            endTime = downtime.getElementsByTagName('FORMATED_END_DATE')[0].childNodes[0].data
            severity = downtime.getElementsByTagName('SEVERITY')[0].childNodes[0].data

            dt = dict()
            dt['classification'] = classification
            dt['severity'] = severity
            dt['hostname'] = hostname
            dt['serviceType'] = serviceType
            dt['startTime'] = startTime
            dt['endTime'] = endTime
            filteredDowntimes.append(dt)
    else:
        print('ERROR: Connection to GOCDB failed: ' + res.reason)

    return filteredDowntimes

##############################
# main
##############################

argsOk = False
for i in range(0,len(sys.argv)-1):
        if sys.argv[i] == '-d':
                if len(sys.argv[i+1].split('-')) == 3:
			date = sys.argv[i+1]
                        argsOk = True

if not argsOk:
        print "\n\nUsage:\n\tpython downtime.py -d <date>"
        sys.exit()

start = date
end = date

downtimes = getDowntimes(start, end)

filename = createOutputFilename(defaultOutputFileDowntimes, date)
outFile = open(filename, 'w')
for dt in downtimes:
    
    if dt['classification'] == 'SCHEDULED' and dt['severity'] == 'OUTAGE':
        
        outFile.write(defaultOutputFileDowntimesFieldFormat % ( dt['hostname'],
                   dt['serviceType'],
                   dt['startTime'].replace(' ', 'T', 1).replace(' ', ':') + ':00Z',
                   dt['endTime'].replace(' ', 'T', 1).replace(' ', ':') + ':00Z' ))
outFile.close();
