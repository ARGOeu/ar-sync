#!/usr/bin/python

# Copyright (c) 2013 GRNET S.A., SRCE, IN2P3 CNRS Computing Centre
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language
# governing permissions and limitations under the License.
# 
# The views and conclusions contained in the software and
# documentation are those of the authors and should not be
# interpreted as representing official policies, either expressed
# or implied, of either GRNET S.A., SRCE or IN2P3 CNRS Computing
# Centre
# 
# The work represented by this source file is partially funded by
# the EGI-InSPIRE project through the European Commission's 7th
# Framework Programme (contract # INFSO-RI-261323) 

import urllib
import urllib2
import os
import json
import datetime
import httplib
import sys
import urlparse

defaultConfig = '/etc/ar-sync/poem-sync.conf'

defaultPoemFile = '/etc/ar-sync/poem.conf'
defaultPoemProfileFile = '/etc/ar-sync/poem-profile.conf'
defaultPoemServerFile = '/etc/ar-sync/poem-server.conf'
defaultOutputDir = '/var/lib/ar-sync'
hostKey = '/etc/grid-security/hostkey.pem'
hostCert = '/etc/grid-security/hostcert.pem'

defaultOutputFile = defaultOutputDir + '/poem_sync_%s.out'
defaultOutputFileFieldFormat = '%s\001%s\001%s\001%s\001%s\001%s\001%s\r\n'
defaultPoemRequest = '%s/myegi/sam-pi/metrics_in_profiles?vo_name=%s&output=json'

##############################
# load config
##############################
def loadConfiguration():
    #load config
    configFile = None
    configFields = dict()
    if os.path.isfile(defaultConfig):
        configFile = open(defaultConfig, 'r')
        lines = configFile.readlines()

        for line in lines:
            if line[0] == '#':
                continue
            splitLine = line.split('=')
            if len(splitLine) > 1:
                key = splitLine[0].strip()
                value = splitLine[1].strip()
                value = value.decode('string_escape')
                if value[0] == "'":
                    if value [-1] == "'":
                        value = value[1:-1]
                    else:
                        continue
                elif value[0] == '"':
                    if value [-1] == '"':
                        value = value[1:-1]
                    else:
                        continue
                else:
                    value = int(value)
                configFields[key] = value

        configFile.close()

        if 'poemFile' in configFields:
            defaultPoemFile = configFields['poemFile']

        if 'poemProflieFile' in configFields:
            defaultPoemProfileFile = configFields['poemProflieFile']

        if 'poemServerFile' in configFields:
            defaultPoemServerFile = configFields['poemServerFile']

        if 'outputDir' in configFields:
            defaultOutputDir = configFields['outputDir']

        if 'hostKey' in configFields:
            hostKey = configFields['hostKey']

        if 'hostCert' in configFields:
            hostCert = configFields['hostCert']

        defaultOutputFile = defaultOutputDir + '/poem_sync_%s.out'


##############################
# create output filename
##############################
def createOutputFilename(timestamp):
	return defaultOutputFile % timestamp

##############################
# load filtered profiles
##############################
def loadFilteredProfiles():

	poemProfileFile = open(defaultPoemProfileFile, 'r')
	poemProfiles = poemProfileFile.read().splitlines()
	poemProfileFile.close();
	
	filterProfiles = []
	for line in poemProfiles:
        	if len(line) == 0 or line[0] == '#':
                        continue
        	filterProfiles.append(line.upper());

	return filterProfiles

##############################
# load available vos
##############################
def loadAvailableVOs():

	poemFile = open(defaultPoemFile, 'r')
	poems = poemFile.read().splitlines()
	poemFile.close();

	avaliableVOs = []
	for line in poems:
        	if len(line) == 0 or line[0] == '#':
                        continue

        	url = line.split(';')[0]
        	vos = line.split(';')[1].split(',')
		
		for vo in vos:
			if not vo in avaliableVOs:
				avaliableVOs.append(vo)

	return avaliableVOs

##############################
# load profiles from server
##############################
def loadProfilesFromServer(server, vo, filterProfiles):

	validProfiles = dict()

	doFilterProfiles = False
	if len(filterProfiles) > 0:
		doFilterProfiles = True

	print server
	print defaultPoemRequest % ('',vo)	

	url = resolve_http_redirect('https://' + defaultPoemRequest % (server,vo))
	print url

	o = urlparse.urlparse(url,allow_fragments=True)
	try:
		conn = httplib.HTTPSConnection(o.netloc, 443, hostKey, hostCert)
                conn.request('GET', o.path + '?' + o.query)		

		#conn = httplib.HTTPSConnection(server, 443, hostKey, hostCert)
		#conn.request('GET', defaultPoemRequest % ('',vo))
		res = conn.getresponse()
		if res.status == 200:
			json_data = json.loads(res.read())
                	for profile in json_data[0]['profiles']:
                        	if not doFilterProfiles or (profile['namespace']+'.'+profile['name']).upper() in filterProfiles:
                                	validProfiles[(profile['namespace']+'.'+profile['name']).upper()] = profile
		elif res.status in (301,302):
			print('Redirect: ' + urlparse.urljoin(url, res.getheader('location', '')))

                	# url = urlparse.urljoin(url, responseOb.getheader('location', ''))
                	# conn = self.getconnection(url,True)
		else:
			print('ERROR: Connection failed: ' + res.reason)
	except:
		print "Unexpected error:", sys.exc_info()[0]

#	try:
#		urlFile = urllib2.urlopen(defaultPoemRequest % (server,vo), None, 5)
#
#		json_data = json.load(urlFile)
#		for profile in json_data[0]['profiles']:
#			if not doFilterProfiles or profile['name'] in filterProfiles:
#				validProfiles[(profile['namespace']+'.'+profile['name']).lower()] = profile
#		urlFile.close();
#	except:
#		print 'Error!'

	return validProfiles

def resolve_http_redirect(url, depth=0):
	if depth > 10:
		raise Exception("Redirected "+depth+" times, giving up.")

	o = urlparse.urlparse(url,allow_fragments=True)
	conn = httplib.HTTPSConnection(o.netloc, 443, hostKey, hostCert)
	path = o.path
	if o.query:
		path +='?'+o.query

	try:
		conn.request("HEAD", path)
		res = conn.getresponse()
		headers = dict(res.getheaders())
		if headers.has_key('location') and headers['location'] != url:
			return resolve_http_redirect(headers['location'], depth+1)
		else:
			return url
	except:
		return url;


##############################
# write profiles for server
##############################
def writeProfilesForServer(server, ngi, profile, outputFile):
	for metric in profile['metrics']:
		outputFile.write(defaultOutputFileFieldFormat % (server, ngi, profile['namespace']+'.'+profile['name'], metric['service_flavour'], metric['name'], profile['vo'], metric['fqan']))
		

##############################
# main
##############################

# load config

loadConfiguration()

# load filtered profiles

doFilterProfiles = False
filterProfiles = loadFilteredProfiles()
if len(filterProfiles) > 0:
	doFilterProfiles = True

print filterProfiles
print doFilterProfiles

# load profiles

availableVOs = loadAvailableVOs()

poemFile = open(defaultPoemFile, 'r')
poems = poemFile.read().splitlines()
poemFile.close();

validProfiles = dict()

for line in poems:
        if len(line) == 0 or line[0] == '#':
                        continue

	url = line.split(';')[0]
	vos = line.split(';')[1].split(',')

	for vo in vos:
		serverProfiles = loadProfilesFromServer(url, vo, filterProfiles)
		for profile in serverProfiles.keys():
			if not profile in validProfiles.keys():
				validProfiles[profile] = serverProfiles[profile]
				validProfiles[profile]['vo'] = vo

		
# load server data

timestamp = datetime.datetime.utcnow().strftime('%Y_%m_%d')
filename = createOutputFilename(timestamp)
outputFile = open(filename, 'w')

poemServerFile = open(defaultPoemServerFile, 'r')
poemServers = poemServerFile.read().splitlines()
poemServerFile.close();

for line in poemServers:
        if len(line) == 0 or line[0] == '#':
                        continue

	if line.split('=')[0] == 'URL':

		url = ''
		defaultProfiles = []
		if len(line.split('=')[1].split(';')) > 1:
			url = line.split('=')[1].split(';')[0]			
			defaultProfiles = line.split('=')[1].split(';')[1].split(',')
		else:
			url = line.split('=')[1]

		profiles = line.split('=')[1].split(';')[1] 

		urlFile = urllib.urlopen(url)
		urlLines = urlFile.read().splitlines()

		for urlLine in urlLines:
			if len(urlLine) == 0 or urlLine[0] == '#':
                        	continue
			
			ngis = urlLine.split(':')[0].split(',')
			servers = urlLine.split(':')[2].split(',')

			for vo in availableVOs:
				serverProfiles = []
				if len(defaultProfiles) > 0:
					serverProfiles = defaultProfiles
				else:
					serverProfiles = loadProfilesFromServer(servers[0], vo, filterProfiles).keys()
                		for profile in serverProfiles:
                        		if profile.upper() in validProfiles.keys():
						for ngi in ngis:
							for server in servers:
								writeProfilesForServer(server, ngi, validProfiles[profile.upper()], outputFile)

		urlFile.close();

	else:
		ngis = line.split(':')[0].split(',')
                servers = []
                
		defaultProfiles = []
                if len(line.split(':')[1].split(';')) > 1:
                        servers = line.split(':')[1].split(';')[0].split(',')
                        defaultProfiles = line.split(':')[1].split(';')[1].split(',')
                else:
			servers = line.split(':')[1].split(';')[0].split(',')
		
		for vo in availableVOs:
			serverProfiles = []
			if len(defaultProfiles) > 0:
				serverProfiles = defaultProfiles
			else:
				serverProfiles = loadProfilesFromServer(servers[0], vo, filterProfiles).keys()
			for profile in serverProfiles:
				if profile.upper() in validProfiles.keys():
					for ngi in ngis:
						for server in servers:
							writeProfilesForServer(server, ngi, validProfiles[profile.upper()], outputFile)
		
outputFile.close()	

