#!/usr/bin/python

# Copyright (c) 2013 GRNET S.A., SRCE, IN2P3 CNRS Computing Centre
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language
# governing permissions and limitations under the License.
# 
# The views and conclusions contained in the software and
# documentation are those of the authors and should not be
# interpreted as representing official policies, either expressed
# or implied, of either GRNET S.A., SRCE or IN2P3 CNRS Computing
# Centre
# 
# The work represented by this source file is partially funded by
# the EGI-InSPIRE project through the European Commission's 7th
# Framework Programme (contract # INFSO-RI-261323) 

import urllib
import os
import datetime
import xml.dom.minidom
import httplib
from operator import itemgetter

defaultConfig = '/etc/ar-sync/topology-sync.conf'

gocdbHost = 'goc.egi.eu'
gocdbUrl = 'https://'+gocdbHost+'/gocdbpi/'
hostKey = '/etc/grid-security/hostkey.pem'
hostCert = '/etc/grid-security/hostcert.pem'
outputDir = '/var/lib/ar-sync'

defaultOutputFileSites = outputDir + '/sites_%s.out'
defaultOutputFileGroups = outputDir + '/groups_%s.out'
# Hostname, Service Type, Production, Monitored, Scope, Site, NGI, Infrastructure, Certification Status, Site Scope
defaultOutputFileSitesFieldFormat = '%s\001%s\001%s\001%s\001%s\001%s\001%s\001%s\001%s\001%s\r\n'
# Hostname, Service Type, Production, Monitored, Service group, Group Monitored, Group Scope
defaultOutputFileGroupsFieldFormat = '%s\001%s\001%s\001%s\001%s\001%s\001%s\r\n'

def loadConfiguration():
    #load config
    configFile = None
    configFields = dict()
    if os.path.isfile(defaultConfig):
        configFile = open(defaultConfig, 'r')
        lines = configFile.readlines()

        for line in lines:
            if line[0] == '#':
                continue
            splitLine = line.split('=')
            if len(splitLine) > 1:
                key = splitLine[0].strip()
                value = splitLine[1].strip()
                value = value.decode('string_escape')
                if value[0] == "'":
                    if value [-1] == "'":
                        value = value[1:-1]
                    else:
                        continue
                elif value[0] == '"':
                    if value [-1] == '"':
                        value = value[1:-1]
                    else:
                        continue
                else:
                    value = int(value)
                configFields[key] = value

        configFile.close()

        if 'gocdbHost' in configFields:
            gocdbHost = configFields['gocdbHost']
        
        if 'gocdbUrl' in configFields:
            gocdbUrl = configFields['gocdbUrl']

        if 'hostKey' in configFields:
            hostKey = configFields['hostKey']

        if 'hostCert' in configFields:
            hostCert = configFields['hostCert']

        if 'outputDir' in configFields:
            outputDir = configFields['outputDir']

	defaultOutputFileSites = outputDir + '/sites_%s.out'
        defaultOutputFileGroups = outputDir + '/groups_%s.out'

def createOutputFilename(filename, timestamp):
    return filename % timestamp

def getServiceEndpoints(serviceList, scope):
    urlFile = urllib.urlopen(gocdbUrl + '/public/?method=get_service_endpoint&scope=' + scope)
    doc = xml.dom.minidom.parse(urlFile)
    services = doc.getElementsByTagName('SERVICE_ENDPOINT')
    for service in services:
        serviceId = ''
        if service.getAttributeNode('PRIMARY_KEY'):
            serviceId = str(service.attributes['PRIMARY_KEY'].value)
        if serviceId not in serviceList:
            serviceList[serviceId] = {}
        serviceList[serviceId]['hostname'] = service.getElementsByTagName('HOSTNAME')[0].childNodes[0].data
        serviceList[serviceId]['type'] = service.getElementsByTagName('SERVICE_TYPE')[0].childNodes[0].data
        serviceList[serviceId]['monitored'] = service.getElementsByTagName('NODE_MONITORED')[0].childNodes[0].data
        serviceList[serviceId]['production'] = service.getElementsByTagName('IN_PRODUCTION')[0].childNodes[0].data
        serviceList[serviceId]['site'] = service.getElementsByTagName('SITENAME')[0].childNodes[0].data
        serviceList[serviceId]['roc'] = service.getElementsByTagName('ROC_NAME')[0].childNodes[0].data
        serviceList[serviceId]['scope'] = scope
        serviceList[serviceId]['sortId'] = serviceList[serviceId]['hostname'] + '-' + serviceList[serviceId]['type'] + '-' + serviceList[serviceId]['site']
    urlFile.close();

def getSites(siteList, scope):
    conn = httplib.HTTPSConnection(gocdbHost, 443, hostKey, hostCert)
    conn.request('GET', '/gocdbpi/private/?method=get_site&scope=' + scope)
    res = conn.getresponse()
    if res.status == 200:
        dom = xml.dom.minidom.parseString(res.read())
        sites = dom.getElementsByTagName('SITE')
        for site in sites:
            siteName = site.getAttribute('NAME')
            if siteName not in siteList:
                siteList[siteName] = {'site': siteName}
            siteList[siteName]['infrastructure'] = site.getElementsByTagName('PRODUCTION_INFRASTRUCTURE')[0].childNodes[0].data
            siteList[siteName]['certification'] = site.getElementsByTagName('CERTIFICATION_STATUS')[0].childNodes[0].data
            siteList[siteName]['scope'] = scope
    else:
        print('ERROR: Connection to GOCDB failed: ' + res.reason)

def getServiceGroups(groupList, scope):
    conn = httplib.HTTPSConnection(gocdbHost, 443, hostKey, hostCert)
    conn.request('GET', '/gocdbpi/private/?method=get_service_group&scope=' + scope)
    res = conn.getresponse()
    if res.status == 200:
        doc = xml.dom.minidom.parseString(res.read())
        groups = doc.getElementsByTagName('SERVICE_GROUP')
        for group in groups:
            groupId = group.getAttribute('PRIMARY_KEY')
            if groupId not in groupList:
                groupList[groupId] = {}
            groupList[groupId]['name'] = group.getElementsByTagName('NAME')[0].childNodes[0].data
            groupList[groupId]['monitored'] = group.getElementsByTagName('MONITORED')[0].childNodes[0].data
            groupList[groupId]['scope'] = scope
            groupList[groupId]['services'] = []
            services = group.getElementsByTagName('SERVICE_ENDPOINT')
            for service in services:
                serviceDict = {}
                serviceDict['hostname'] = service.getElementsByTagName('HOSTNAME')[0].childNodes[0].data
                serviceDict['type'] = service.getElementsByTagName('SERVICE_TYPE')[0].childNodes[0].data
                serviceDict['monitored'] = service.getElementsByTagName('NODE_MONITORED')[0].childNodes[0].data
                serviceDict['production'] = service.getElementsByTagName('IN_PRODUCTION')[0].childNodes[0].data
                groupList[groupId]['services'].append(serviceDict)
    else:
        print('ERROR: Connection to GOCDB failed: ' + res.reason)

##############################
# main
##############################

loadConfiguration()

siteList = {}
serviceList = {}
groupList = {}

getSites(siteList, 'EGI')
getSites(siteList, 'Local')

getServiceEndpoints(serviceList, 'EGI')
getServiceEndpoints(serviceList, 'Local')

getServiceGroups(groupList, 'EGI')
getServiceGroups(groupList, 'Local')

timestamp = datetime.datetime.utcnow().strftime('%Y_%m_%d')

sortedSrvices = sorted(serviceList.iteritems(), key=lambda (x, y): y['sortId'])

filename = createOutputFilename(defaultOutputFileSites, timestamp)
outFile = open(filename, 'w')
lastId = ''
for key, service in sortedSrvices:
    if service['site'] in siteList:
        site = siteList[service['site']]
        
        if lastId != service['sortId']: 
            outFile.write(defaultOutputFileSitesFieldFormat % ( service['hostname'],
                   service['type'],
                   service['production'],
                   service['monitored'],
                   service['scope'],
                   service['site'],
                   service['roc'],
                   site['infrastructure'],
                   site['certification'],
                   site['scope']))

        lastId = service['sortId']                   
    else:
        print('ERROR: found service endpoint (%s, %s) associated to non-existing site %s' % (service['hostname'], service['type'], service['site']))
outFile.close();

filename = createOutputFilename(defaultOutputFileGroups, timestamp)
outFile = open(filename, 'w')
for key, group in groupList.iteritems():
    for service in group['services']:
        outFile.write(defaultOutputFileGroupsFieldFormat % ( service['hostname'],
                   service['type'],
                   service['production'],
                   service['monitored'],
                   group['name'],
                   group['monitored'],
                   group['scope']))
outFile.close();

